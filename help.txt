Helper File
- credits : youtube.com/jdh

Starting command:

cc src/wolf.c -o main \
  -I/opt/homebrew/include/SDL2 \
  -L/opt/homebrew/lib \
  -lSDL2

Colors:

0xFFFF0000	    Full red
0xFF00FF00	    Full green
0xFF0000FF	    Full blue
0xFFFFFFFF	    Full white
0xFF000000	    Full black
0xFFFFFF00	    Red + Green
0xFF00FFFF	    Green + Blue
0xFFFF00FF	    Red + Blue
0xFF808080	    Equal RGB values
0xFFD3D3D3	    Softer gray
0xFF404040	    Dark tone
0xFFFFA500	    Red + some green
0xFFFFC0CB	    Light red-ish
0xFFA52A2A	    Red-dominant brown
0xFF800080	    Red + Blue, low values
0x00000000	    Fully transparent black

Render Editor:

if (ev.type == SDL_MOUSEBUTTONDOWN && ev.button.button == SDL_BUTTON_LEFT) {
    // 1. Get local coordinates for the area that can be drawn in
    int mx = ev.button.x - 331, my = ev.button.y - 29;

    // 2. Pixel Position (local coordinates) into grid coordinates (snipping to nearest)
    int gx = mx / TILE_SIZE, gy = my / TILE_SIZE;

    // 3. If given grid Point is valid
    if (gx >= 0 && gx < GRID_SIZE && gy >= 0 && gy < GRID_SIZE)
        state.walls[state.wall_count++] = (v2i){ gx, gy };
}

Render Game:

void render_game() {
    for (int x = 0; x < SCREEN_WIDTH; x++) {
        f32 xcam = 2 * (x / (f32)SCREEN_WIDTH) - 1;
        v2 ray = { state.dir.x + state.plane.x * xcam,
                   state.dir.y + state.plane.y * xcam };

        v2 pos = state.pos;

        v2i map = { (int)pos.x,
                    (int)pos.y };

        v2 delta = { fabsf(1.0f / ray.x),
                     fabsf(1.0f / ray.y) };

        v2 side = {
            ray.x < 0 ? (pos.x - map.x) * delta.x : (map.x + 1.0 - pos.x) * delta.x,
            ray.y < 0 ? (pos.y - map.y) * delta.y : (map.y + 1.0 - pos.y) * delta.y, };

        v2i step = { sign(ray.x),
                     sign(ray.y) };

        int side_hit = 0, val = 0;
        while (!val) {
            if (side.x < side.y) { side.x += delta.x; map.x += step.x; side_hit = 0; }
            else { side.y += delta.y; map.y += step.y; side_hit = 1; }
            val = MAPDATA[map.y * 8 + map.x];
        }

        u32 color = 0;
        switch (val) {
            case 1: color = 0xFF0000FF; break;
            case 2: color = 0xFF00FF00; break;
            case 3: color = 0xFFFF0000; break;
            case 4: color = 0xFFFF00FF; break;
        }

        if (side_hit) {
            u32 r = ((color >> 16) & 0xFF) * 0.6;
            u32 g = ((color >> 8) & 0xFF) * 0.6;
            u32 b = (color & 0xFF) * 0.6;
            color = (0xFF << 24) | (r << 16) | (g << 8) | b;
        }

        f32 dist = side_hit ? (side.y - delta.y) : (side.x - delta.x);
        int h = (int)(SCREEN_HEIGHT / dist);
        int y0 = max(0, SCREEN_HEIGHT / 2 - h / 2);
        int y1 = min(SCREEN_HEIGHT, SCREEN_HEIGHT / 2 + h / 2);

        verline(x, 0, y0, 0xFF202020);
        verline(x, y0, y1, color);
        verline(x, y1, SCREEN_HEIGHT, 0xFF505050);
    }
}

static void render() {
    // 1. Iterating over Screen
    for (int x = 0; x < SCREEN_WIDTH; x++) {
        // 2. Compute ray dir for this column
        const f32 xcam  = (2 * (x / (f32) (SCREEN_WIDTH))) -1;
        const v2  dir   = { state.dir.x + state.plane.x * xcam,
                            state.dir.y + state.plane.y * xcam };

        // 3. Initial pos and integer tile pos
        v2  pos      = state.pos; // Starting point of ray
        v2i ipos     = { (int) pos.x, (int) pos.y }; // Storing integer map coords

        // 4. Pre-get dist between x / y sides (delta)
        const v2 deltaDist = {  fabsf(dir.x) < 1e-20 ? 1e30 : fabsf(1.0f / dir.x),
                                fabsf(dir.y) < 1e-20 ? 1e30 : fabsf(1.0f / dir.y) };

        // 5. Calc initial dist to dirst x / y grid lines
        v2 sideDist = { deltaDist.x * (dir.x < 0 ? (pos.x - ipos.x) : ((ipos.x + 1) - pos.x)),
                        deltaDist.y * (dir.y < 0 ? (pos.y - ipos.y) : ((ipos.y + 1) - pos.y))
        }; // How fast ray has to go till first x / y wall boundary

        // 6. Step dir on x / y axes
        const v2i step = {  (int) sign(dir.x),
                            (int) sign(dir.y) };

        // 7. DDA ???
        struct {
            int val, side;
            v2  pos;
        } hit = { 0, 0, { 0.0f, 0.0f } };

        while (!hit.val) {
            if (sideDist.x < sideDist.y) {
                sideDist.x += deltaDist.x;
                ipos.x += step.x;
                hit.side = 0;
            }
            else {
                sideDist.y += deltaDist.y;
                ipos.y += step.y;
                hit.side = 1;
            }

            // ASSERT( ipos.x >= 0 && ipos.x < MAP_SIZE && ipos.y >= 0 && ipos.y < MAP_SIZE, "DDA out of Bounds");

            hit.val = MAPDATA[ipos.y * MAP_SIZE + ipos.x];
        }   // -- March along the grid until wall is hit
            // -- sideDist => next side boundary
            // -- hit.side => weather x (0) or y (1) was crossed
            // -- Loop ends when a non-zero value (wall) is found in the map

        // 8. Color based on map value
        u32 color = 0;
        switch (hit.val) {
            case 1: color = 0xFF0000FF; break;
            case 2: color = 0xFF00FF00; break;
            case 3: color = 0xFFFF0000; break;
            case 4: color = 0xFFFF00FF; break;
        }

        // 9. Walls on y-Sides are darker
        if (hit.side == 1) {
            const u32
                r   = ((color & 0xFF0000) >> 16) * 0.6,
                g   = ((color & 0x00FF00) >> 8)  * 0.6,
                b   = (color & 0x0000FF) * 0.6;

            color = (0xFF000000) | (min(r, 255) << 16) | (min(g, 255) << 8) | min(b, 255);
        } // Darkens color of ray hit wall from the y-axis side


        // 10. Hit point and perpendicular dist
        hit.pos = (v2) { pos.x + sideDist.x, pos.y + sideDist.y };

        const f32 dperp = hit.side == 0 ? \
            (sideDist.x - deltaDist.x) : (sideDist.y - deltaDist.y);

        const int
            h   = (int) (SCREEN_HEIGHT / dperp),
            y0  = max((SCREEN_HEIGHT / 2) - (h / 2), 0),
            y1  = min((SCREEN_HEIGHT / 2) + (h / 2), SCREEN_HEIGHT - 1);

        verline(x, 0, y0, 0xFF202020); // Gray Sky
        verline(x, y0, y1, color); // Drawing walls
        verline(x, y1, SCREEN_HEIGHT - 1, 0xFF505050); // Dark Gray floor
    }
}